#+title: Tear Engine
#+author: keyring
#+options: num:nil

* Build a project

** Why need an engine

   为什么要专门开发游戏引擎？为什么要使用游戏引擎来开发游戏？游戏引擎的优势在哪？
简言之：开发游戏不是绝对需要引擎的。但这建立在两个基础上，1）这个游戏很简单，2）你在过往的项目中积累了大量的代码。
游戏引擎本质上就是一堆游戏开发库，用来节省游戏开发的时间。使用统一的引擎，利于团队在统一的标准上开发游戏，节约团队开发时间；引擎跨平台，节约游戏移植时间；游戏逻辑与基础功能分离，开发效率更高。

** Choice
   引擎只是一个框架，一个库，所以实现方式多样，技术选型也受多方面影响。比如语言方面，c,c++,c#,java,python等等都有，然后是硬件平台，PC，MAC，移动，主机等等，还有系统，windows，linux，macos，ios，android，xbox，ps4等等。
这里，我的开发选择是用C++开发一个跨平台引擎，至少支持windows和linux。使用emacs编辑，premake其他工程文件。

** Create engine core lib
*** install dependence

**** glfw3
- linux/macos
  1. sudo apt-get install cmake xorg-dev
  2. git clone https://github.com/glfw/glfw.git
  3. cd glfw
  4. mkdir build
  5. cd build
  6. cmake ../
  7. make && sudo make install

- windows
  1. go to http://www.glfw.org/download.html
  2. download windows pre-compiled binary and unpack
  3. go to your visual studio installed path, in VC folder
  4. put /GLFW/ to include folder, /glfw3.lib glfw3dll.lib/ to lib folder, /glfw3.dll/ to bin folder

**** premake
为了管理不同平台的工程文件，我们采用premake构建工具，它与cmake类似，但用lua代码进行配置。

*** window framework
游戏引擎为游戏服务。游戏运行于操作系统上，它首先是应用程序，然后才是游戏。所以，游戏首先需要的是用于展示内容的“窗口”。窗口在不同的操作系统上有不同的称呼，所以建立窗口的方式也是操作系统强相关的。
这里我采用 *GLFW* 库来简化窗口的创建。

**** create a window
     现在我们使用glfw，用最少的代码创建一个空窗口。
#+BEGIN_SRC c++

#include <GLFW/glfw3.h>

#include <stdlib.h>
#include <stdio.h>

static void error_callback(int error, const char *description)
{
  fprintf(stderr, "TxxE Error: %s\n", description);
}

static void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods)
{
  if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS){
    glfwSetWindowShouldClose(window, GLFW_TRUE);
  }
}


int main(void)
{

  glfwSetErrorCallback(error_callback);
  if(!glfwInit()){
    return -1;
  }

  GLFWwindow *window = glfwCreateWindow(800, 600, "Txx", NULL, NULL);
  if(!window){
    glfwTerminate();
    return -1;
  }

  glfwSetKeyCallback(window, key_callback);

    while(!glfwWindowShouldClose(window)){
      glClear(GL_COLOR_BUFFER_BIT);

      glfwSwapBuffers(window);

      glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}

#+END_SRC

**** build a application
     在ubuntu上快速编译运行一下。
     #+BEGIN_SRC shell
     g++ main.cpp -lglfw3 -lX11 -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor -lGL -lpthread -ldl
     #+END_SRC

     稍微正常的人都不会愿意每次编译都写上这么一段，所以makefile文件是必须的。而为了跨平台，又需要一个能一键生成各个平台的工程文件。所以我们使用premake来生成各个平台的工程文件。配置信息见 premake5.lua。
*** engine framework
游戏最基本的运行逻辑， *加载* ， *初始化* ， *更新* ， *结束* 。我们的引擎会在必要的时候调用这四个操作来驱动游戏运行。

    #+BEGIN_SRC c++
    extern bool game_load();
    extern bool game_init();
    extern void game_update();
    extern void game_end();
    #+END_SRC

    所有基于本引擎的游戏必须实现这四个函数。

*** engine lib
    现在我们来将引擎做成一个库，真正的游戏就建立在这个库之上。

#+BEGIN_SRC c++
// Tear.h
#ifndef __TEAR_H__
#define __TEAR_H__

extern bool game_load();
extern bool game_init();
extern void game_update();
extern void game_end();

namespace Tear{
    class Engine{
        int m_window_width;
        int m_window_height;

    public:
        Engine();
        ~Engine();

        int init(int width, int height);
        void update();
        void close();

        int getWindowWidth(){ return this->m_window_width; }
        void setWindowWidth(int value){ this->m_window_width = value; }
        int getWindowHeight(){ return this->m_window_height; }
        void setWindowHeight(int value){ this->m_window_height = value; }
    };
};

// global engine object
extern Tear::Engine *g_tear_engine;
#endif

#+END_SRC

#+BEGIN_SRC c++
// Tear.cpp
#include "Tear.h"

namespace Tear{
    Engine::Engine():m_window_width(800),
                     m_window_height(600)
    {
    }

    Engine::~Engine()
    {
    }

    int Engine::init(int width, int height)
    {
        if(!game_init()){
            return 0;
        }

        return 1;
    }

    void Engine::update()
    {
        game_update();
    }

    void Engine::close()
    {
        game_end();
    }
}

#+END_SRC

#+BEGIN_SRC c++
// main.cpp
#include "Tear.h"

#include <GLFW/glfw3.h>
#include <cstdlib>
#include <cstdio>

static void error_callback(int error, const char *description)
{
    fprintf(stderr, "glfw Error: %s\n", description);
}

static void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods)
{
    if(key == GLFW_KEY_ESCAPE && action == GLFW_PRESS){
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    }

}

Tear::Engine *g_tear_engine;

int main(void)
{
    glfwSetErrorCallback(error_callback);
    if(!glfwInit()){
        return -1;
    }

    g_tear_engine = new Tear::Engine();

    if(!game_load()){
        fprintf(stderr, "game load fail\n");
        return 0;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    GLFWwindow *window = glfwCreateWindow(g_tear_engine->getWindowWidth(), g_tear_engine->getWindowHeight(), "Tear Engine", nullptr, nullptr);
    if(!window){
        fprintf(stderr, "Failed to open GLFW window\n");
        glfwTerminate();
        return -1;
    }

    glfwSetKeyCallback(window, key_callback);

    if(!g_tear_engine->init(g_tear_engine->getWindowWidth(), g_tear_engine->getWindowHeight())){
        fprintf(stderr, "game engine init fail\n");
        return 0;
    }


    while (!glfwWindowShouldClose(window)){

        glfwPollEvents();

        g_tear_engine->update();

        glfwSwapBuffers(window);

    }
    g_tear_engine->close();
    delete g_tear_engine;

    glfwDestroyWindow(window);
    glfwTerminate();

    return 0;
}

#+END_SRC
** Test
   引擎已经弄好，现在来写一个游戏吧。
#+BEGIN_SRC c++
// example_01.cpp
#include "Tear.h"

bool game_load()
{
    g_tear_engine->setWindowWidth(640);
    g_tear_engine->setWindowHeight(480);
    return true;
}

bool game_init()
{
    return true;
}

void game_update()
{

}

void game_end()
{

}

#+END_SRC


运行成功后会出现一个黑色的窗口，这一次的窗口已经不再是纯粹的窗口了。它本质上已经变成了通过引擎驱动起来的游戏。通过在上述四个game_xx函数里不断添加游戏逻辑，就能产生不同的游戏。

* Rendering
游戏最重要的元素当属视觉效果，毕竟人类70%的信息获取也是视觉提供的。游戏的画面在图形学中称为 *渲染（Rendering）* 。
游戏引擎在窗口支持之后的第一要务就是图形渲染支持。

** 图形API
我们要在窗口上画图，做渲染，离不开硬件的支持。最简单的画图就是直接往显示器内存写像素值。而今，随着技术的发展，GPU的普及，绘图的工作
基本由GPU负责。为了避免直接操作硬件，从而抽象出各类图形API，提高绘图的开发效率。下面是当前主流的几个图形API。
 - OpenGL： 传承自SGI，最早的专用图形API，属于开放性标准。因为跨平台，多用于专业领域，游戏领域甚少使用。
 - Direc3D： 微软私有标准，仅限于windows，XBOX,winphone平台。桌面图形API的霸主，设计精良，效率一流，桌面游戏开发的不二之选。
 - OpenGL ES： 精简版 OpenGL，专为小型嵌入式设备设计。因移动平台崛起而风靡。
 - Metal： 苹果自家最新私有标准，为改良OpenGL ES诞生。
 - Vulkan： 下一代 OpenGL 标准，统一桌面移动两种 GL，降低驱动层消耗，最大化利用硬件能力。

** 使用 OpenGL/OpenGL ES
由于当前移动游戏崛起，以前不受游戏开发待见的OpenGL因为跨平台性焕发了第二春。所以，我们的游戏引擎的图形API支持就从OpenGL
开始。
*** GLEW（桌面）
同前面所使用的glfw类似，glew是简化在桌面平台使用OpenGL的一个库。OpenGL当前版本已经到了4.x（终止开发，转向vulkan），但受操作系统限制，即使用上最牛比的显卡
如果操作系统本身不支持高版本的API，你也就用不上。其中最狠的就是windows上，只支持最古老的OpenGL1.1。所以我们急需绕过操作系统，直接使用显卡提供的高版本API。这就是GLEW的用处。

**** install
     - linux
       1. git clone https://github.com/nigels-com/glew.git glew
       2. cd glew/auto
       3. make
       4. cd ..
       5. sudo make install

     - windows
       1. download pre-binary



*** EGL（移动）
我们在移动端使用OpenGLES，但GLES本身只是一个操作GPU的API，不具备与平台Native层交互的能力。所以EGL的
因此而生——作为GLES与Native窗口的桥梁。
EGL 是 OpenGL ES（嵌入式）和底层 Native 平台视窗系统之间的接口。
EGL API 是独立于OpenGL ES各版本标准的独立API ，其主要作用是为OpenGL指令创
建 Context 、绘制目标Surface 、配置Framebuffer属性、Swap提交绘制结果等。
此外，EGL为GPU厂商和OS窗口系统之间提供了一个标准配置接口。

** 绘制一个三角形
使用OpenGL绘制一个三角形应该是“Hello World”级别的GL程序。
